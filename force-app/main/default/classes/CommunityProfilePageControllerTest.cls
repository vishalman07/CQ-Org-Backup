/********************************************************************************************
* @Name         CommunityProfilePageControllerTest
* @Author       Amit Yadav
* @Date         12/01/2023
* @Description  CommunityProfilePageControllerTest class contains test methods to validate the behavior of methods
 				in the CommunityProfilePageController class. It focuses on testing various functionalities and cover 
				positive and negative sinario  
******************************************************************************************* 
MODIFICATION LOG
* Version          Developer          Date               Description
*
*  1.0             Amit Yadav         12/01/2023         Initial Creation                                                      
********************************************************************************************/
/*CommunityProfilePageControllerTest class contains test methods to validate the behavior of methods in the CommunityProfilePageController class. 
  It focuses on testing various functionalities and cover positive and negative sinario  */
@isTest
public class CommunityProfilePageControllerTest {
    
    @testSetup
    public static void createData(){
        // Creating a test Account  
        Account ac = new Account();
        ac.Name = 'test';
        ac.Phone = '1234567890';
        ac.BillingStreet = 'testStreet';
        ac.BillingCity = 'Sydney';
        ac.BillingPostalCode = '778855';
        ac.BillingState = 'test';        
        insert ac;
        // Creating a test Contact with Volunteer record type
        Contact con = new Contact();
        con.AccountId = ac.Id;
        con.LastName = 'Test2';
        con.RecordTypeId =  Schema.SObjectType.Contact.getRecordTypeInfosByDeveloperName().get('Volunteer').getRecordTypeId();
        con.Email = 'testversion235@gmail.com';
        con.HomePhone = '12345678';
        con.Preferred_Event_Locations__c = 'Central Queensland';
        con.MailingCity = 'Delhi';
        con.MailingStreet = 'testConStreet';
        con.MailingState = 'UP';
        con.MailingPostalCode = '443322';
        con.MailingCountry = 'UK';
        con.Swimming_Ability__c = '25-50m';
        con.Shirt_Size__c = 'Adult XS';
        con.Emergency_Contact__c = '5554449991';
        con.Emergency_Contact_Phone__c = '1239870458';
        con.Emergency_Contact_Mobile__c = '9807654321';
        con.Emergency_Contact_Relationship__c = 'Test';
        con.Birthdate = System.today();
        con.MobilePhone = '7856412534';
        insert con;
        
        // Creating a test data of attachment
        Attachment__c att = new Attachment__c();
        att.Content_Type__c = 'Attachment';
        insert att;
        
        // Creating test Special Needs records
        Special_Needs__c speDiet = new Special_Needs__c();
        speDiet.Contact__c = con.Id;
        speDiet.RecordTypeId = Schema.SObjectType.Special_Needs__c.getRecordTypeInfosByDeveloperName().get('Dietary_Requirement').getRecordTypeId();
        speDiet.Long_Description__c = 'Allergic - All Nuts';
        speDiet.Comments__c = 'testComments';              
        insert speDiet;
        
        Special_Needs__c speNeed = new Special_Needs__c();
        speNeed.Contact__c = con.Id;
        speNeed.RecordTypeId = Schema.SObjectType.Special_Needs__c.getRecordTypeInfosByDeveloperName().get('Special_Need').getRecordTypeId();
        speNeed.Long_Description__c = 'Allergic - Buckwheat';
        speNeed.Comments__c = 'TestSpComment';
        insert speNeed;
        
        Special_Needs__c spDietNeed  = new Special_Needs__c();
        spDietNeed.Contact__c = con.Id;
        spDietNeed.RecordTypeId = Schema.SObjectType.Special_Needs__c.getRecordTypeInfosByDeveloperName().get('Dietary_Requirement').getRecordTypeId();
        spDietNeed.Long_Description__c = 'Allergic - All Nuts';
        spDietNeed.Comments__c = 'deleteDiet';  
        insert spDietNeed;       
    }
    
    @isTest
    public static void testPotalData(){
        // Start the test execution context
        Test.startTest();   
        // Retrieve a Contact record with a last name containing 'Test2' for testing purposes
        Contact con = [Select Id,FirstName,LastName,Email FROM Contact WHERE LastName LIKE '%Test2%' LIMIT 1];
        // Retrieve a list of Special Needs records related to the obtained Contact
        List<Special_Needs__c> spNeedDiet = [Select Id,RecordTypeId,Long_Description__c,Comments__c,Contact__c FROM Special_Needs__c WHERE Contact__c =:con.Id];
        // Declare variables for Special Needs records
        Special_Needs__c speDietry;
        Special_Needs__c speNeed;
        Special_Needs__c speDelete;
        // Create lists to store wrapper classes for dietary requirements and special needs
        List<CommunityProfilePageController.DietWrapper> dietWrap = new List<CommunityProfilePageController.DietWrapper>();
        List<CommunityProfilePageController.SpeNeedWrapper> spWrap = new List<CommunityProfilePageController.SpeNeedWrapper>();
        // Iterate through the list of Special Needs records
        for(Special_Needs__c spn : spNeedDiet){
            // Check if the record type is 'Special Need'
            if(spn.recordTypeId == Schema.SObjectType.Special_Needs__c.getRecordTypeInfosByDeveloperName().get('Special_Need').getRecordTypeId()){
                // Create a wrapper for 'Special Need' and populate it with relevant data
                CommunityProfilePageController.SpeNeedWrapper spNeed = new CommunityProfilePageController.SpeNeedWrapper();
                spNeed.specNeedDescription = spn.Long_Description__c;
                spNeed.specNeedComment = spn.Comments__c;
                spNeed.id = spn.Id;
                spNeed.recordId = spn.Id;
                // Add the wrapper to the list
                spWrap.add(spNeed);
                // Store the 'Special Need' record for further reference
                speNeed = spn;
                System.assertEquals(spn.recordTypeId, Schema.SObjectType.Special_Needs__c.getRecordTypeInfosByDeveloperName().get('Special_Need').getRecordTypeId());
            }
            // Check if the 'Dietary Requirement' record has a specific comment
            else if(spn.recordTypeId == Schema.SObjectType.Special_Needs__c.getRecordTypeInfosByDeveloperName().get('Dietary_Requirement').getRecordTypeId()){
                if(spn.Comments__c == 'testComments'){
                    // Create a wrapper for 'Dietary Requirement' and populate it with relevant data
                    CommunityProfilePageController.DietWrapper diet = new CommunityProfilePageController.DietWrapper();
                    diet.recordId = '';
                    diet.id = '';
                    diet.dietComment = spn.Comments__c;
                    diet.dietDescription = spn.Long_Description__c;
                    // Add the wrapper to the list
                    dietWrap.add(diet);
                    // Store the 'Dietary Requirement' record for further reference
                    speDietry = spn;
                }
                else{
                    // Store the 'Dietary Requirement' record for deletion
                    speDelete = spn;
                    if (speDelete != null) {
                        System.assertNotEquals(speDelete.Id, '', 'speDelete should have a valid Id when adding for deletion');
                    }
                    
                }
            }           
        }
        // Query for the 'My Camp Quality Members' profile and store it in CommunityProfile variable
        Profile CommunityProfile = [SELECT Id FROM Profile WHERE Name = 'My Camp Quality Members' LIMIT 1];
        // Create a new User instance with specified attributes
        User us = new User(
            ContactId=con.Id,
            ProfileId=CommunityProfile.Id,
            EmailEncodingKey='UTF-8',
            LocaleSidKey='en_AU',
            LanguageLocaleKey='en_US',
            TimeZoneSidKey='Australia/Sydney',
            Email=con.Email,
            UserName=con.Email,
            Alias=con.Email.subString(0, 8),
            FirstName=con.FirstName,
            LastName=con.LastName
        );
        // Use System.runAs to execute code as the new user
        System.runas(us){           
            // Call methods from the CommunityProfilePageController class
            CommunityProfilePageController.locationInProfile();
            CommunityProfilePageController.userAvatar(us.Id);
            String imgData = '';
            // Call the imageUpload method from CommunityProfilePageController class with the imgData parameter 
			CommunityProfilePageController.imageUpload(imgData);
            //Decrypt the userId
            String userIdToEncrypt = UserInfo.getUserId();
            Blob key = EncodingUtil.base64Decode('50pQJwgGsPMUnDF1Qi1oPg==');
            Blob cipherText = Crypto.encryptWithManagedIV('AES128', key, Blob.valueOf(userIdToEncrypt));
            String encryptedString = EncodingUtil.base64Encode(cipherText);
            // Get profile data from CommunityProfilePageController class
            String wrapProfile = CommunityProfilePageController.getProfiledata(encryptedString);
            // Create a list of CommunityProfilePageController.SpeNeedWrapper
            List<CommunityProfilePageController.SpeNeedWrapper> wrapPro = new List<CommunityProfilePageController.SpeNeedWrapper>();
            String jsonData = '{"emailAddress":"amit2023@yopmail.com","homePhone":"8888888888","swimmingAbility":null,"address":"Noida","mobilePhone":null,"shirtSize":"M","suburb":"Delhi","preferredEventLocations":"Northern New South Wales;South Australia;Australian Capital Territory","state":"Delhi","postcode":"009911","imagePermissionCheckBox":false,"imageSharingOptionCheckBox":false,"imageBelowways":false,"imageSharedParticipantsCheckBox":false,"imageSharedPromoteWithCharitable":false,"imagepromoteCorporatePartners":false,"dietList":[{"recordId":"'+speDietry.Id +'", "id":"'+speDietry.Id+'" ,"dietDescription":"Allergic - All Nuts","dietComment":"This is Test All Nuts Test"}],"speNeedList":[{"specNeedDescription":"ADHD","specNeedComment":"This is test ADHD","id":"0"},{"recordId":"'+speNeed.Id+'","id":"'+speNeed.Id+'","dietDescription":"Allergic - Buckwheat","dietComment":"This is testing record"}],"speNeedDelete":[{"id":"'+speDelete.Id+'"}]}';
			String jsonDataNegative = '{"emailAddress":"amit2023@yopmail.com","homePhone":"8888888888","swimmingAbility":null,"address":"Noida","mobilePhone":null,"shirtSize":"M","suburb":"Delhi","preferredEventLocations":"Northern New South Wales;South Australia;Australian Capital Territory","state":"Delhi","postcode":"009911","imagePermissionCheckBox":false,"imageSharingOptionCheckBox":false,"imageBelowways":false,"imageSharedParticipantsCheckBox":false,"imageSharedPromoteWithCharitable":false,"imagepromoteCorporatePartners":false,"dietList":[{"recordId":"'+speDietry.Id +'", "id":"'+speDietry.Id+'" ,"dietDescription":"Allergic - All Nuts","dietComment":"This is Test All Nuts Test"}],"speNeedList":[{},{}],"speNeedDelete":[{"id":"'+speDelete.Id+'"}]}';
            CommunityProfilePageController.saveData(jsonData, encryptedString);  
            // Create a new instance of CommunityProfilePageController.WrapperVoluteerData
            CommunityProfilePageController.WrapperVoluteerData wrap = new CommunityProfilePageController.WrapperVoluteerData();
            // Set values for the wrapper object
            wrap.shirtSize = 'Kids 4';
            wrap.swimmingAbility = '25-50m';                       
            wrap.speNeedList = spWrap;
            wrap.dietList = dietWrap;
            wrap.imagePermissionCheckBox = false;
            wrap.imageSharingOptionCheckBox = true;
            wrap.imageSharedParticipantsCheckBox = false;
            wrap.imageSharedPromoteWithCharitable = true;
            wrap.imagepromoteCorporatePartners = true;
            wrap.imageBelowways = true;
            // Serialize the wrapper object to JSON
            String jsdata = JSON.serialize(wrap);
            // Call saveData method from CommunityProfilePageController class with serialized JSON data
            CommunityProfilePageController.saveData(jsdata,encryptedString);
            System.assertEquals(jsdata, JSON.serialize(wrap)); // Compare serialized JSON with original wrapper data
            // Stop test execution
            Test.stopTest();            
        }
    }
    public static void testPotalDataNegative(){   
        // Start a new test context
        Test.startTest(); 
        // Query a contact with last name containing 'Test2'
        Contact con = [Select Id,FirstName,LastName,Email FROM Contact WHERE LastName LIKE '%Test2%' LIMIT 1];
        // Query special needs records related to the retrieved contact
        List<Special_Needs__c> spNeedDiet = [Select Id,RecordTypeId,Long_Description__c,Comments__c,Contact__c FROM Special_Needs__c WHERE Contact__c =:con.Id];
        // Initialize variables to store specific types of special needs records
		Special_Needs__c speDietry;
        Special_Needs__c speNeed;
        Special_Needs__c speDelete;
        // Lists to store wrapper objects for diet and special needs
        List<CommunityProfilePageController.DietWrapper> dietWrap = new List<CommunityProfilePageController.DietWrapper>();
        List<CommunityProfilePageController.SpeNeedWrapper> spWrap = new List<CommunityProfilePageController.SpeNeedWrapper>();    
        // Iterate through the special needs records
        for(Special_Needs__c spn : spNeedDiet){
            // Check if the record type is 'Special_Need'
            if(spn.recordTypeId == Schema.SObjectType.Special_Needs__c.getRecordTypeInfosByDeveloperName().get('Special_Need').getRecordTypeId()){ 
                // Create a special needs wrapper for 'Special_Need'
                CommunityProfilePageController.SpeNeedWrapper spNeed = new CommunityProfilePageController.SpeNeedWrapper();
                spNeed.specNeedDescription = spn.Long_Description__c;
                spNeed.specNeedComment = spn.Comments__c;
                spNeed.id = '';
                spNeed.recordId = '';
                spWrap.add(spNeed);               
                // Store the special needs record for reference
                speNeed = spn;
            }
            // Check if the record type is 'Dietary_Requirement' and has a specific comment
            else if(spn.recordTypeId == Schema.SObjectType.Special_Needs__c.getRecordTypeInfosByDeveloperName().get('Dietary_Requirement').getRecordTypeId()){
                if(spn.Comments__c == 'testComments'){   
                    // Create a diet wrapper for 'Dietary_Requirement'
                    CommunityProfilePageController.DietWrapper diet = new CommunityProfilePageController.DietWrapper();
                    diet.recordId = spn.Id;
                    diet.id = spn.Id;
                    diet.dietComment = spn.Comments__c;
                    diet.dietDescription = spn.Long_Description__c;
                    dietWrap.add(diet);      
                    // Store the special needs record for reference
                    speDietry = spn;
                }
                else{
                    // Store the special needs record to be deleted
                    speDelete = spn;
                }
            }           
        }   
        // Querying the 'My Camp Quality Members' profile
        Profile CommunityProfile = [SELECT Id FROM Profile WHERE Name = 'My Camp Quality Members' LIMIT 1];
        // Creating a new User with the details from the Contact and the queried Profile
        User us = new User(
            ContactId=con.Id,
            ProfileId=CommunityProfile.Id,
            EmailEncodingKey='UTF-8',
            LocaleSidKey='en_AU',
            LanguageLocaleKey='en_US',
            TimeZoneSidKey='Australia/Sydney',
            Email=con.Email,
            UserName=con.Email,
            Alias=con.Email.subString(0, 8),
            FirstName=con.FirstName,
            LastName=con.LastName
        ); 
        // Running as the new User to execute specific methods in the CommunityProfilePageController
        System.runas(us){ 
            // Call locationInProfile method
            CommunityProfilePageController.locationInProfile();
            // Call userAvatar method
            CommunityProfilePageController.userAvatar(us.Id);
            // Getting image data
            String imgData = '';
            // Call imageUpload method
			CommunityProfilePageController.imageUpload(imgData);
            String wrapProfile = CommunityProfilePageController.getProfiledata(us.Id);
            // Creating a list of Special Need wrappers
            List<CommunityProfilePageController.SpeNeedWrapper> wrapPro = new List<CommunityProfilePageController.SpeNeedWrapper>();
            String jsonData = '{"emailAddress":"amit2023@yopmail.com","homePhone":"8888888888","swimmingAbility":null,"address":"Noida","mobilePhone":null,"shirtSize":"M","suburb":"Delhi","preferredEventLocations":"Northern New South Wales;South Australia;Australian Capital Territory","state":"Delhi","postcode":"009911","imagePermissionCheckBox":false,"imageSharingOptionCheckBox":false,"imageSharedParticipantsCheckBox":false,"imageSharedPromoteWithCharitable":false,"imagepromoteCorporatePartners":false,"dietList":[{"recordId":"'+speDietry.Id +'", "id":"'+speDietry.Id+'" ,"dietDescription":"Allergic - All Nuts","dietComment":"This is Test All Nuts Test"}],"speNeedList":[{"specNeedDescription":"ADHD","specNeedComment":"This is test ADHD","id":"0"},{"recordId":"'+speNeed.Id+'","id":"'+speNeed.Id+'","dietDescription":"Allergic - Buckwheat","dietComment":"This is testing record"}],"speNeedDelete":[{"id":"'+speDelete.Id+'"}]}';           
            String jsonDataNegative = '{"emailAddress":"amit2023@yopmail.com","homePhone":"8888888888","swimmingAbility":null,"address":"Noida","mobilePhone":null,"shirtSize":"M","suburb":"Delhi","preferredEventLocations":"Northern New South Wales;South Australia;Australian Capital Territory","state":"Delhi","postcode":"009911","imagePermissionCheckBox":false,"imageSharingOptionCheckBox":false,"imageSharedParticipantsCheckBox":false,"imageSharedPromoteWithCharitable":false,"imagepromoteCorporatePartners":false,"dietList":[{{"recordId":"", "id":"" ,"dietDescription":"Allergic - All Nuts","dietComment":"This is Test All Nuts Test"}}],"speNeedList":[{},{}],"speNeedDelete":[{"id":"'+speDelete.Id+'"}]}';
            // Creating an instance of the WrapperVoluteerData class from CommunityProfilePageController
			CommunityProfilePageController.WrapperVoluteerData wrap = new CommunityProfilePageController.WrapperVoluteerData();
            // Setting values in wrapper class 
            wrap.shirtSize = 'Kids 4';
            wrap.swimmingAbility = '25-50m';                       
            wrap.speNeedList = spWrap;
            wrap.dietList = dietWrap;
			// Serializing the wrapper object to JSON
            String jsdata = JSON.serialize(wrap);
			// Calling the saveData method from CommunityProfilePageController with the serialized JSON data
            CommunityProfilePageController.saveData(jsdata, us.Id);
            // Stopping the test execution
            Test.stopTest();             
        }
    }
    
    @isTest
    static void testDecryptedData() {
        // Test data

		String userIdToEncrypt = UserInfo.getUserId() ;
        Blob key = EncodingUtil.base64Decode('50pQJwgGsPMUnDF1Qi1oPg==');
        Blob cipherText = Crypto.encryptWithManagedIV('AES128', key, Blob.valueOf(userIdToEncrypt));
        String encryptedString = EncodingUtil.base64Encode(cipherText);
        
        //String userIdToEncrypt = UserInfo.getUserId() ;
        Blob keyde = EncodingUtil.base64Decode('50pQJwgGsPMUnDF1Qi1oPg==');
        Blob cipherTextde = Crypto.decryptWithManagedIV('AES128', keyde, cipherText);
        String encryptedString2 = EncodingUtil.base64Encode(cipherText);

        // Call the method to test
        String decryptedString = CommunityLoginController.decryptedData(encryptedString2);
        system.debug(decryptedString);

        // Verify the result
        System.assertEquals(userIdToEncrypt, decryptedString, 'Decryption failed');
    }
}